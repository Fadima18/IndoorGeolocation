# Nom du workflow
# Moussa

name: Django Pipeline

# Définir les actions pour lesquels on appelle le workflow
on:
  push:
    branches:
      - master
      - tests
      - Deploy
  pull_request:
    branches:
      - master
      - tests
      - Deploy

env:
  AZURE_WEBAPP_NAME: myproduction
  CONTAINER_REGISTRY: ${{ secrets.REGISTRY_URL }}
  AZURE_RESOURCE_GROUP: rg-django
  AZURE_APP_PLAN: myproduction-asp
  WEBHOOK_NAME: whookmyproduction

# Travail du pipeline (ensemble d'étapes que nous allons exécuter)
jobs:

  dependencies-check-and-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Installation des dépendences
      run:
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Tests
      run:
        coverage run manage.py test
    - name: Coverage Report
      run:
        coverage xml

  quality:
    runs-on: ubuntu-latest
    needs: dependencies-check-and-tests
    steps:
    - uses: actions/checkout@v2
    - name:  Quality Gate
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  quality-gate-check:
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - uses: sonarsource/sonarqube-quality-gate-action@master
      - name: Check Quality Gate
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  release:
    runs-on: ubuntu-latest
    needs: quality-gate-check
    steps:
    - uses: actions/checkout@v2
    - name: Dockerize
      run:
        docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t  ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest .
        docker push ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ github.ref }} != "refs/heads/release"
    steps:
    - uses: actions/checkout@v2
    - name: Some check on branch
      id: branch_check
      run: |
        echo "Running on branch ${{ github.ref }}"
        if [ "${{ github.ref }}" != "refs/heads/tests" ]; then
          echo "::set-output name=env_name::development"       
    - name: Use variable setup in previous step
      run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.WEB_SERVER_IP }}
        username: ${{ secrets.WEB_SERVER_USERNAME }}
        key: ${{ secrets.WEB_SERVER_KEY }}
        port: 22
        script: | #script to execute once inside the remote computer
          mkdir -p ~/.ssh
          touch  ~/.ssh/known_host
          ssh-keyscan -H ${{ secrets.WEB_SERVER_IP }} >> ~/.ssh/known_hosts
          sudo sudo apt-get update
          sudo apt install docker.io
          docker --version # just to test installation
          # sudo docker container ls -aq --filter name=${{ secrets.DOCKER_REGISTRY_IMAGE }} |xargs --no-run-if-empty sudo docker stop |xargs --no-run-if-empty sudo docker container rm 
          # sudo docker run --name cicdeptgitdic1  -d -p 8000:8000 ${{secrets.DOCKER_REGISTRY_IMAGE}}:latest


  deploy-to-prod:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ github.ref }} = "refs/heads/release"
    environment: production
    steps:
    - uses: actions/checkout@v2
    - name: Some check on branch
      id: branch_check
      run: |
        echo "Running on branch ${{ github.ref }}"
        if [ "${{ github.ref }}" = "refs/heads/master" ]; then
          echo "::set-output name=env_name::production"      
    - name: Use variable setup in previous step
      run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"
    - name: Deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.WEB_SERVER_IP }}
        username: ${{ secrets.WEB_SERVER_USERNAME }}
        key: ${{ secrets.WEB_SERVER_KEY }}
        port: 22
        script: | #script to execute once inside the remote computer
          mkdir -p ~/.ssh
          touch  ~/.ssh/known_host
          ssh-keyscan -H ${{ secrets.WEB_SERVER_IP }} >> ~/.ssh/known_hosts
          sudo sudo apt-get update
          sudo apt install docker.io
          docker --version # just to test installation
          # sudo docker container ls -aq --filter name=${{ secrets.DOCKER_REGISTRY_IMAGE }} |xargs --no-run-if-empty sudo docker stop |xargs --no-run-if-empty sudo docker container rm 
          # sudo docker run --name cicdeptgitdic1  -d -p 8000:8000 ${{secrets.DOCKER_REGISTRY_IMAGE}}:latest
    

