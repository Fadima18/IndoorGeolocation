# Nom du workflow
# Moussa

name: Django Pipeline

# Définir les actions pour lesquels on appelle le workflow
on:
  push:
    branches:
      - master
      - tests
  pull_request:
    branches:
      - master
      - tests

# Travail du pipeline (ensemble d'étapes que nous allons exécuter)
jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres: 
        image: postgres
        env: 
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432 
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Installation des dépendences
      run:
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Tests
      run:
        coverage run manage.py test

    - name: Coverage Report
      run:
        coverage xml

    - name:  Quality Gate
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Check Quality Gate
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Dockerize
      run: |
        docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t  ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest .        # docker build -t image:tag_1 -t image:tag_2 .... -t image:tage_n .
        docker push ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest # only push latest tag

