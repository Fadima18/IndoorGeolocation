name: Django Pipeline

on:
  push:
    branches:
      - release
      - dev  
  pull_request:
    branches:
      - release
      - dev

jobs:

  dependencies-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Installation des dÃ©pendences
      run:  |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
  tests:
    runs-on: ubuntu-latest
    needs: dependencies-check
    steps:
    - uses: actions/checkout@v2
    - name: Tests
      run:  |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python manage.py collectstatic
        coverage run manage.py test
        mkdir -p path/to/artifact
        coverage xml
        mv coverage.xml path/to/artifact/coverage.xml
    - uses: actions/upload-artifact@master
      with:
        name: coverage
        path: path/to/artifact
        
  quality:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@master
      with:
        name: coverage
        path: path/to/artifact
    - run: mv path/to/artifact/coverage.xml coverage.xml
    - name:  Quality Gate
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  check-quality-gate:
     runs-on: ubuntu-latest
     needs: quality
     steps:
     - uses: actions/checkout@v2
     - uses: actions/download-artifact@master
       with:
        name: coverage
        path: path/to/artifact
     - run: mv path/to/artifact/coverage.xml coverage.xml
     - name:  Quality Gate
       uses: SonarSource/sonarcloud-github-action@master
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     - name: Check Quality Gate
       id: sonarqube-quality-gate-check
       uses: sonarsource/sonarqube-quality-gate-action@master
       timeout-minutes: 5
       env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  package:
    runs-on: ubuntu-latest
    needs: check-quality-gate
    steps:
    - uses: actions/checkout@v2
    - name: Package
      run:  |
        pip install build
        python -m build 
        
  release:
    runs-on: ubuntu-latest
    needs: package
    steps: 
    - uses: actions/checkout@v2
    - name: Dockerize
      run: |
        docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t  ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest .
        mkdir -p path/to/docker-artifacts
        docker save ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest > path/to/docker-artifacts/docker-image.tar
        docker push ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest # only push latest tag
    - name: Temporarily save Docker image
      uses: actions/upload-artifact@v2
      with:
        name: docker-artifact
        path: path/to/docker-artifacts
  
  branch-check:
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/checkout@v2
    - name: Set environment for branch
      id: branch_check
      run: |
        echo "Running on branch ${{ github.ref }}"
        if [ "${{ github.ref }}" = "refs/heads/release" ]; then
          echo "::set-output name=env_name::prod"
        else
            echo "::set-output name=env_name::dev"
        fi
    - name: Use variable setup in previous step
      run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}


  deploy-dev:
    if: ${{ needs.branch-check.outputs.env_name == 'dev' }}
    runs-on: ubuntu-latest
    needs: [branch-check]
    environment:
      name: dev
    steps:
    - uses: actions/checkout@v2
    - name: Retrieve saved Docker image
      uses: actions/download-artifact@v2
      with:
        name: docker-artifact
        path: path/to/docker-artifacts
    - name: Push Docker
      run: |
        cd path/to/docker-artifacts
        docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
        docker load < docker-image.tar
        docker push ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest
    - name: Login to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
        justlogin: true,
    - name: Find app name
      id: app_name
      run : |
          echo "::set-output name=heroku_app_name::"${{ secrets.HEROKU_APP_NAME_DEV }}""
    - name: Deploying
      run:  |
        echo "Deploying to ${{ needs.branch-check.outputs.env_name }}"
        docker login --username=_ --password=${{secrets.HEROKU_API_KEY}} registry.heroku.com
        docker tag ${{secrets.DOCKER_REGISTRY_IMAGE}} registry.heroku.com/${{steps.app_name.outputs.heroku_app_name}}/web
        docker push registry.heroku.com/${{steps.app_name.outputs.heroku_app_name}}/web
        heroku container:release web -a ${{steps.app_name.outputs.heroku_app_name}}
    - name : Test deploy
      id: test-deploy
      uses: indiesdev/curl@v1.1
      with:
          url: https://${{steps.app_name.outputs.heroku_app_name}}.herokuapp.com
          method: "GET"
          accept: 200
          timeout: 300000
          log-response: true
          retries: 2
  
  deploy-prod:
    if: ${{ needs.branch-check.outputs.env_name == 'prod' }}
    runs-on: ubuntu-latest
    needs: [branch-check]
    environment:
      name: prod
    steps:
    - uses: actions/checkout@v2
    - name: Retrieve saved Docker image
      uses: actions/download-artifact@v2
      with:
        name: docker-artifact
        path: path/to/docker-artifacts
    - name: Push Docker
      run: |
        cd path/to/docker-artifacts
        docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
        docker load < docker-image.tar
        docker push ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest
    - name: Login to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
        justlogin: true,
    - name: Find app name
      id: app_name
      run : |
          echo "::set-output name=heroku_app_name::"${{ secrets.HEROKU_APP_NAME_PROD }}""
    - name: Deploying
      run:  |
        echo "Deploying to ${{ needs.branch-check.outputs.env_name }}"
        docker login --username=_ --password=${{secrets.HEROKU_API_KEY}} registry.heroku.com
        docker tag ${{secrets.DOCKER_REGISTRY_IMAGE}} registry.heroku.com/${{steps.app_name.outputs.heroku_app_name}}/web
        docker push registry.heroku.com/${{steps.app_name.outputs.heroku_app_name}}/web
        heroku container:release web -a ${{steps.app_name.outputs.heroku_app_name}}
    - name : Test deploy
      id: test-deploy
      uses: indiesdev/curl@v1.1
      with:
          url: https://${{steps.app_name.outputs.heroku_app_name}}.herokuapp.com
          method: "GET"
          accept: 200
          timeout: 300000
          log-response: true
          retries: 2
    
  notify:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: ["deploy-dev", "deploy-prod"]
    steps:
    - uses: actions/checkout@v2
    - name: Discord notification
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      uses: Ilshidur/action-discord@master
      with:
        args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed.'
