name: Django Pipeline

on:
  push:
    branches:
      - master
      - release
      - Deploy
  pull_request:
    branches:
      - master
      - release
      - Deploy

jobs:

  dependencies-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Installation des d√©pendences
      run:  |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  tests:
    runs-on: ubuntu-latest
    needs: dependencies-check
    steps:
    - uses: actions/checkout@v2
    - name: Tests
      run:  |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python manage.py collectstatic
        coverage run manage.py test
  
  quality:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - uses: actions/checkout@v2
    - name: Tests
      run:  |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python manage.py collectstatic
        coverage run manage.py test
        coverage xml
    - name:  Quality Gate
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  check-quality-gate:
    runs-on: ubuntu-latest
    needs: quality
    steps:
    - uses: actions/checkout@v2
    - name: Tests
      run:  |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python manage.py collectstatic
        coverage run manage.py test
        coverage xml
    - name:  Quality Gate
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Check Quality Gate
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  package:
    runs-on: ubuntu-latest
    needs: check-quality-gate
    steps:
    - uses: actions/checkout@v2
    - name: Package
      run:  |
        pip install build
        python -m build 

  release:
    runs-on: ubuntu-latest
    needs: package
    steps: 
    - uses: actions/checkout@v2
    - name: Dockerize
      run: |
        docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t  ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest .
        docker push ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest # only push latest tag
  
  branch-check:
    runs-on: ubuntu-latest
    needs: release
    steps:
    - uses: actions/checkout@v2
    - name: Set environment for branch
      id: branch_check
      run: |
        echo "Running on branch ${{ github.ref }}"
        if [ "${{ github.ref }}" = "refs/heads/release" ]; then
          echo "::set-output name=env_name::prod"
        else
            echo "::set-output name=env_name::dev"
        fi
    - name: Use variable setup in previous step
      run: echo "I'm using variable ${{ steps.branch_check.outputs.env_name }}"

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
      

  deploy:
    runs-on: ubuntu-latest
    needs: [branch-check]
    environment:
      name: ${{ needs.branch-check.outputs.env_name }}
    steps:
      - uses: actions/checkout@v2
      - name: Dockerize
        run: |
          docker login -u=${{secrets.DOCKER_USERNAME }} -p=${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{secrets.DOCKER_REGISTRY_IMAGE }}:${{ github.sha }} -t  ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest .
          docker push ${{secrets.DOCKER_REGISTRY_IMAGE }}:latest # only push latest tag
      - name: Login to Heroku
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}
          justlogin: true,
      - name: Find app name
        id: app_name
        run : |
          if [ "${{ needs.branch-check.outputs.env_name }}" = "dev" ]; then
            echo "::set-output name=heroku_app_name::"${{ secrets.HEROKU_APP_NAME_DEV }}""
          else
            echo "::set-output name=heroku_app_name::"${{ secrets.HEROKU_APP_NAME_PROD }}""
          fi
      - name: Deploy
        run:  |
          echo "Deploying to ${{ needs.branch-check.outputs.env_name }}"
          docker login --username=_ --password=${{secrets.HEROKU_API_KEY}} registry.heroku.com
          docker tag ${{secrets.DOCKER_REGISTRY_IMAGE}} registry.heroku.com/${{steps.app_name.outputs.heroku_app_name}}/web
          docker push registry.heroku.com/${{steps.app_name.outputs.heroku_app_name}}/web
          heroku container:release web -a ${{steps.app_name.outputs.heroku_app_name}}
      - name : Test deploy
        id: test-deploy
        uses: indiesdev/curl@v1.1
        with:
            url: https://${{steps.app_name.outputs.heroku_app_name}}.herokuapp.com
            method: "GET"
            accept: 200
            timeout: 15000
            log-response: true
            retries: 2
